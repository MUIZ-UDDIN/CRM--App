version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crm_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: sales_crm
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/sample_data.sql:/docker-entrypoint-initdb.d/02-sample_data.sql
    networks:
      - crm_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crm_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - crm_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: crm_backend
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/sales_crm
      - DATABASE_URL_SYNC=postgresql://postgres:password@postgres:5432/sales_crm
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    networks:
      - crm_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: crm_frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_API_BASE_URL=http://localhost:8000/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - crm_network
    command: npm run dev -- --host 0.0.0.0

  # Celery Worker (for background tasks)
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: crm_celery_worker
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/sales_crm
      - REDIS_URL=redis://redis:6379/1
      - SECRET_KEY=your-super-secret-key-change-in-production
    volumes:
      - ./backend:/app
    networks:
      - crm_network
    command: celery -A app.core.celery worker --loglevel=info

  # Celery Beat (for scheduled tasks)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: crm_celery_beat
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/sales_crm
      - REDIS_URL=redis://redis:6379/1
      - SECRET_KEY=your-super-secret-key-change-in-production
    volumes:
      - ./backend:/app
    networks:
      - crm_network
    command: celery -A app.core.celery beat --loglevel=info

  # Flower (Celery monitoring)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: crm_flower
    restart: unless-stopped
    depends_on:
      - redis
      - celery_worker
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
    networks:
      - crm_network
    command: celery -A app.core.celery flower --port=5555

  # Nginx (Production reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: crm_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - crm_network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  crm_network:
    driver: bridge